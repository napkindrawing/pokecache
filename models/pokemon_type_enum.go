// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"fmt"
	"strings"
)

const (
	// PokemonTypeNormal is a PokemonType of type Normal.
	PokemonTypeNormal PokemonType = "Normal"
	// PokemonTypeFire is a PokemonType of type Fire.
	PokemonTypeFire PokemonType = "Fire"
	// PokemonTypeWater is a PokemonType of type Water.
	PokemonTypeWater PokemonType = "Water"
	// PokemonTypeElectric is a PokemonType of type Electric.
	PokemonTypeElectric PokemonType = "Electric"
	// PokemonTypeGrass is a PokemonType of type Grass.
	PokemonTypeGrass PokemonType = "Grass"
	// PokemonTypeIce is a PokemonType of type Ice.
	PokemonTypeIce PokemonType = "Ice"
	// PokemonTypeFighting is a PokemonType of type Fighting.
	PokemonTypeFighting PokemonType = "Fighting"
	// PokemonTypePoison is a PokemonType of type Poison.
	PokemonTypePoison PokemonType = "Poison"
	// PokemonTypeGround is a PokemonType of type Ground.
	PokemonTypeGround PokemonType = "Ground"
	// PokemonTypeFlying is a PokemonType of type Flying.
	PokemonTypeFlying PokemonType = "Flying"
	// PokemonTypePsychic is a PokemonType of type Psychic.
	PokemonTypePsychic PokemonType = "Psychic"
	// PokemonTypeBug is a PokemonType of type Bug.
	PokemonTypeBug PokemonType = "Bug"
	// PokemonTypeRock is a PokemonType of type Rock.
	PokemonTypeRock PokemonType = "Rock"
	// PokemonTypeGhost is a PokemonType of type Ghost.
	PokemonTypeGhost PokemonType = "Ghost"
	// PokemonTypeDragon is a PokemonType of type Dragon.
	PokemonTypeDragon PokemonType = "Dragon"
	// PokemonTypeDark is a PokemonType of type Dark.
	PokemonTypeDark PokemonType = "Dark"
	// PokemonTypeSteel is a PokemonType of type Steel.
	PokemonTypeSteel PokemonType = "Steel"
	// PokemonTypeFairy is a PokemonType of type Fairy.
	PokemonTypeFairy PokemonType = "Fairy"
)

var ErrInvalidPokemonType = fmt.Errorf("not a valid PokemonType, try [%s]", strings.Join(_PokemonTypeNames, ", "))

var _PokemonTypeNames = []string{
	string(PokemonTypeNormal),
	string(PokemonTypeFire),
	string(PokemonTypeWater),
	string(PokemonTypeElectric),
	string(PokemonTypeGrass),
	string(PokemonTypeIce),
	string(PokemonTypeFighting),
	string(PokemonTypePoison),
	string(PokemonTypeGround),
	string(PokemonTypeFlying),
	string(PokemonTypePsychic),
	string(PokemonTypeBug),
	string(PokemonTypeRock),
	string(PokemonTypeGhost),
	string(PokemonTypeDragon),
	string(PokemonTypeDark),
	string(PokemonTypeSteel),
	string(PokemonTypeFairy),
}

// PokemonTypeNames returns a list of possible string values of PokemonType.
func PokemonTypeNames() []string {
	tmp := make([]string, len(_PokemonTypeNames))
	copy(tmp, _PokemonTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x PokemonType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PokemonType) IsValid() bool {
	_, err := ParsePokemonType(string(x))
	return err == nil
}

var _PokemonTypeValue = map[string]PokemonType{
	"Normal":   PokemonTypeNormal,
	"normal":   PokemonTypeNormal,
	"Fire":     PokemonTypeFire,
	"fire":     PokemonTypeFire,
	"Water":    PokemonTypeWater,
	"water":    PokemonTypeWater,
	"Electric": PokemonTypeElectric,
	"electric": PokemonTypeElectric,
	"Grass":    PokemonTypeGrass,
	"grass":    PokemonTypeGrass,
	"Ice":      PokemonTypeIce,
	"ice":      PokemonTypeIce,
	"Fighting": PokemonTypeFighting,
	"fighting": PokemonTypeFighting,
	"Poison":   PokemonTypePoison,
	"poison":   PokemonTypePoison,
	"Ground":   PokemonTypeGround,
	"ground":   PokemonTypeGround,
	"Flying":   PokemonTypeFlying,
	"flying":   PokemonTypeFlying,
	"Psychic":  PokemonTypePsychic,
	"psychic":  PokemonTypePsychic,
	"Bug":      PokemonTypeBug,
	"bug":      PokemonTypeBug,
	"Rock":     PokemonTypeRock,
	"rock":     PokemonTypeRock,
	"Ghost":    PokemonTypeGhost,
	"ghost":    PokemonTypeGhost,
	"Dragon":   PokemonTypeDragon,
	"dragon":   PokemonTypeDragon,
	"Dark":     PokemonTypeDark,
	"dark":     PokemonTypeDark,
	"Steel":    PokemonTypeSteel,
	"steel":    PokemonTypeSteel,
	"Fairy":    PokemonTypeFairy,
	"fairy":    PokemonTypeFairy,
}

// ParsePokemonType attempts to convert a string to a PokemonType.
func ParsePokemonType(name string) (PokemonType, error) {
	if x, ok := _PokemonTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PokemonTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return PokemonType(""), fmt.Errorf("%s is %w", name, ErrInvalidPokemonType)
}

// MustParsePokemonType converts a string to a PokemonType, and panics if is not valid.
func MustParsePokemonType(name string) PokemonType {
	val, err := ParsePokemonType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x PokemonType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PokemonType) UnmarshalText(text []byte) error {
	tmp, err := ParsePokemonType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *PokemonType) Set(val string) error {
	v, err := ParsePokemonType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *PokemonType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *PokemonType) Type() string {
	return "PokemonType"
}
